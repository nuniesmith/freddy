# Docker Compose for FREDDY - Essential Infrastructure Services
# Low power server handling core services: reverse proxy, auth, DNS, home automation

# Named volumes for data/cache/databases only
volumes:
  # Application Data (persistent but not config)
  nginx_cache:
  nginx_logs:
  
  # Database volumes
  mysql_data:
  redis_data:
  
  # System volumes
  pihole_data:
  pihole_dnsmasq_data:
  homeassistant_data:
  syncthing_data:

services:
  # =============================================================================
  # FRONTEND SERVICES
  # =============================================================================

  # nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nginx
    environment:
      - TZ=${TZ:-America/Toronto}
    volumes:
      # CONFIG: Git-managed configuration files
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/mime.types:/etc/nginx/mime.types:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./config/nginx/includes:/etc/nginx/includes:ro
      - ./config/nginx/html:/usr/share/nginx/html:ro
      - ./config/nginx/certs:/etc/nginx/ssl:ro
      # DATA: Logs and cache (not in Git)
      - nginx_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped    # ✅ Changed from always for better control
    depends_on:
    #  authelia:
    #    condition: service_healthy
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health", "||", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # authelia - single sign-on authentication
  authelia:
    image: authelia/authelia:latest
    container_name: authelia
    environment:
      - TZ=${TZ:-America/Toronto}
    volumes:
      # CONFIG: Git-managed configuration
      - ./config/authelia:/config
    ports:
      - "9091:9091"
    depends_on:
      mysql:
        condition: service_healthy    # ✅ Wait for database to be ready
      redis:
        condition: service_healthy    # ✅ Wait for redis to be ready
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    # ✅ Health check for authelia
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9091/api/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # =============================================================================
  # SYSTEM SERVICES
  # =============================================================================

  # home assistant (requires host network for device discovery)
  homeassistant:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: homeassistant
    privileged: true
    network_mode: host
    environment:
      - TZ=${TZ:-America/Toronto}
    volumes:
      # DATA: Application data and history
      - homeassistant_data:/data
      # SYSTEM: Required for host access
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped    # ✅ Consistent restart policy

  # pi-hole - local dns server + ad blocker
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    environment:
      TZ: ${TZ:-America/Toronto}
      DNS1: ${PIHOLE_DNS1:-1.1.1.1}
      DNS2: ${PIHOLE_DNS2:-8.8.8.8}
      PIHOLE_DNS_: 'local'
      DHCP_ACTIVE: 'false'
      IPv6: 'false'
      WEB_PORT: '80'
      PIHOLE_UID: ${PUID:-1000}
      PIHOLE_GID: ${PGID:-1000}
      FTLCONF_LOCAL_IPV4: '0.0.0.0'
      WEBPASSWORD: ${PIHOLE_PASSWORD}
    volumes:
      # CONFIG: Git-managed configuration
      - ./config/pihole:/etc/pihole/config:ro
      # DATA: DNS records and logs
      - pihole_data:/etc/pihole
      - pihole_dnsmasq_data:/etc/dnsmasq.d
    ports:
      - "8053:80"
    #  - "53:53/tcp"
    #  - "53:53/udp"
    dns:
      - 127.0.0.1
      - 1.1.1.1
    cap_add:
      - NET_ADMIN
      - SYS_TIME
      - SYS_NICE
    restart: unless-stopped    # ✅ Consistent restart policy
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  # syncthing - file synchronization
  syncthing:
    image: lscr.io/linuxserver/syncthing:latest
    container_name: syncthing
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/Toronto}
    volumes:
      # DATA: Application data
      - syncthing_data:/data
      # SYNC: Directories to sync
      - ${SYNCTHING_DATA_PATH:-/home/syncthing}:/sync
    ports:
      - "8384:8384"
      - "22000:22000/tcp"
      - "22000:22000/udp"
      - "21027:21027/udp"
    restart: unless-stopped    # ✅ Consistent restart policy

  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================

  # mysql - for authelia storage
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-authelia}
      - MYSQL_USER=${MYSQL_USER:-authelia}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - TZ=${TZ:-America/Toronto}
    volumes:
      # DATA: Database files
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # redis - for authelia sessions
  redis:
    image: redis:alpine
    container_name: redis
    environment:
      - TZ=${TZ:-America/Toronto}
    volumes:
      # DATA: Redis data files
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # =============================================================================
  # MONITORING SERVICES
  # =============================================================================

  # watchtower - automatic container updates
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    environment:
      - TZ=${TZ:-America/Toronto}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400
      - WATCHTOWER_ROLLING_RESTART=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_INCLUDE_STOPPED=false
      - WATCHTOWER_REVIVE_STOPPED=false
      - WATCHTOWER_SCHEDULE=${WATCHTOWER_SCHEDULE:-0 2 * * *}
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_NOTIFICATION_URL}
    volumes:
      # SYSTEM: Required for Docker management
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped    # ✅ Consistent restart policy
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  # datadog agent - monitoring and observability
  datadog:
    image: gcr.io/datadoghq/agent:7
    container_name: datadog-agent
    environment:
      - TZ=${TZ:-America/Toronto}
      - DD_API_KEY=${DD_API_KEY}
      - DD_SITE=${DD_SITE:-datadoghq.com}
      - DD_HOSTNAME=${DD_HOSTNAME:-freddy-server}
      - DD_TAGS=${DD_TAGS:-env:homelab,service:web-server}
      - DD_PROCESS_AGENT_ENABLED=true
      - DD_CONTAINER_EXCLUDE="name:datadog-agent"
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_AC_EXCLUDE="name:datadog-agent"
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
    volumes:
      # DATA: Agent data
      #- datadog_data:/opt/datadog-agent/run
      # SYSTEM: Required for monitoring
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    restart: unless-stopped    # ✅ Consistent restart policy
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
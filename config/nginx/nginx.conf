# /etc/nginx/nginx.conf
# Optimized nginx configuration for media server with Authelia authentication

# Main context
user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Events block
events {
    worker_connections 4096;
    multi_accept on;
    use epoll;
    epoll_events 512;
}

# HTTP block
http {
    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # ============================================================================
    # PROXY HEADERS HASH FIX (Fixes the warning you were seeing)
    # ============================================================================
    proxy_headers_hash_max_size 1024;
    proxy_headers_hash_bucket_size 128;

    # ============================================================================
    # INCLUDE MAPS - CENTRALIZED IN MAPS.CONF
    # ============================================================================
    include /etc/nginx/includes/maps.conf;

    # ============================================================================
    # LOGGING CONFIGURATION
    # ============================================================================

    # Enhanced logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time" '
                   'client_type="$client_type"';

    # Additional logging format for debugging
    log_format debug '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time" '
                    'host="$host" upstream="$upstream_addr" '
                    'cache="$upstream_cache_status"';

    # Performance logging format for monitoring
    log_format performance '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent rt=$request_time '
                          'uct="$upstream_connect_time" uht="$upstream_header_time" '
                          'urt="$upstream_response_time" "$http_user_agent"';

    # Health proxy logging format
    log_format health_proxy '$remote_addr - [$time_local] "$request" '
                           '$status rt=$request_time target="$arg_url" '
                           'upstream_status="$upstream_status"';

    # Use conditional logging based on should_log map
    access_log /var/log/nginx/access.log main if=$should_log;
    access_log /var/log/nginx/performance.log performance if=$should_log;
    error_log /var/log/nginx/error.log warn;

    # ============================================================================
    # PERFORMANCE SETTINGS
    # ============================================================================

    # Basic Performance Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 75s;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;

    # Client settings - Optimized for media streaming
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;
    reset_timedout_connection on;

    # Buffer settings - Optimized for media server
    client_body_buffer_size 128k;
    client_header_buffer_size 4k;
    client_max_body_size 1G;
    large_client_header_buffers 8 16k;

    # Proxy buffer settings - Critical for streaming
    proxy_buffering on;
    proxy_buffer_size 8k;
    proxy_buffers 16 8k;
    proxy_busy_buffers_size 16k;
    proxy_temp_file_write_size 16k;
    proxy_max_temp_file_size 1024m;

    # Proxy timeout settings - Important for media streaming
    proxy_connect_timeout 60s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;
    proxy_next_upstream error timeout http_502 http_503 http_504;

    # Enhanced proxy settings for better performance
    proxy_intercept_errors on;
    proxy_ignore_client_abort off;
    proxy_pass_header Server;

    # ============================================================================
    # COMPRESSION SETTINGS
    # ============================================================================

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 32 8k;
    gzip_http_version 1.1;
    gzip_min_length 1024;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Brotli compression (if module is available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/xml image/svg+xml application/x-font-ttf image/vnd.microsoft.icon application/x-font-opentype application/json font/eot application/vnd.ms-fontobject application/javascript font/otf text/css text/javascript application/xml+rss text/plain application/atom+xml image/x-icon application/xml font/truetype application/rss+xml;

    # ============================================================================
    # CACHING SETTINGS
    # ============================================================================

    # File caching
    open_file_cache max=10000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Add cache control header based on content type
    add_header Cache-Control $cache_control_header;

    # Fastcgi cache settings (if using PHP)
    fastcgi_cache_path /var/cache/nginx levels=1:2 keys_zone=WORDPRESS:100m inactive=60m;
    fastcgi_cache_key "$scheme$request_method$host$request_uri";

    # ============================================================================
    # RATE LIMITING ZONES
    # ============================================================================

    # Updated rate limiting zones with better granularity
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;        # Auth endpoints
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;        # API endpoints
    limit_req_zone $binary_remote_addr zone=media:10m rate=20r/s;      # Media streaming
    limit_req_zone $binary_remote_addr zone=admin:10m rate=15r/s;      # Admin interfaces
    limit_req_zone $binary_remote_addr zone=general:10m rate=15r/s;    # General requests
    limit_req_zone $binary_remote_addr zone=health:10m rate=30r/s;     # Health checks

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn_zone $server_name zone=conn_limit_per_server:10m;

    # Apply connection limits globally
    limit_conn conn_limit_per_ip 20;

    # ============================================================================
    # REAL IP CONFIGURATION
    # ============================================================================

    # Real IP configuration (important for Docker/proxy setups)
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;
    set_real_ip_from 172.16.0.0/12;  # Docker network
    set_real_ip_from 10.0.0.0/8;     # Private networks
    set_real_ip_from 192.168.0.0/16; # Private networks
    set_real_ip_from 127.0.0.1/32;   # Localhost

    # ============================================================================
    # SECURITY HEADERS (Applied globally using maps)
    # ============================================================================

    add_header X-Frame-Options $x_frame_options always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy $referrer_policy always;
    add_header Content-Security-Policy $content_security_policy always;
    add_header Strict-Transport-Security $hsts_duration always;

    # Additional security headers
    add_header X-Robots-Tag "noindex, nofollow, nosnippet, noarchive" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    # ============================================================================
    # UPSTREAM DEFINITIONS WITH ENHANCED HEALTH CHECKS
    # ============================================================================

    upstream authelia {
        server 100.121.199.80:9091 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream emby {
        server 100.86.22.59:8096 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream jellyfin {
        server 100.86.22.59:8099 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream plex {
        server 100.86.22.59:32400 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream sonarr {
        server 100.86.22.59:8989 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream radarr {
        server 100.86.22.59:7878 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream lidarr {
        server 100.86.22.59:8686 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream jackett {
        server 100.86.22.59:9117 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream qbittorrent {
        server 100.86.22.59:8080 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream audiobookshelf {
        server 100.86.22.59:80 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream calibre {
        server 100.86.22.59:8081 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream calibre_web {
        server 100.86.22.59:8083 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream ollama {
        server 100.86.22.59:11434 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream open_webui {
        server 100.86.22.59:8080 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream portainer-sullivan {
        server 100.86.22.59:9000 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream portainer-freddy {
        server 100.121.199.80:9000 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream pihole {
        server 100.121.199.80:80 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream filebot {
        server 100.86.22.59:5452 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream duplicati {
        server 100.86.22.59:8200 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream ytdl_material {
        server 100.86.22.59:17442 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream mealie {
        server 100.86.22.59:9000 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream grocy {
        server 100.86.22.59:80 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream readarr_audio {
        server 100.86.22.59:8787 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream readarr_ebooks {
        server 100.86.22.59:8787 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream home_assistant {
        server 100.121.199.80:8123 max_fails=3 fail_timeout=10s;
        keepalive 2;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # ============================================================================
    # DEFAULT SERVERS
    # ============================================================================

    # Default server block to handle undefined server names
    server {
        listen 80 default_server;
        listen 443 ssl default_server;
        server_name _;
        
        # SSL certificate (even for default server)
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        
        # Drop connections to undefined hosts
        return 444;
    }

    # Health check server (minimal, fast, no auth needed)
    server {
        listen 8080;
        server_name localhost;
        
        access_log off;
        error_log off;
        
        location = /health {
            return 200 "OK\n";
            add_header Content-Type text/plain;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }
        
        location = /nginx-status {
            stub_status on;
            allow 127.0.0.1;
            allow 172.16.0.0/12;  # Docker networks
            allow 10.0.0.0/8;     # Private networks
            allow 192.168.0.0/16; # Private networks
            deny all;
        }
        
        location = /metrics {
            # Prometheus metrics endpoint if you use monitoring
            stub_status on;
            allow 127.0.0.1;
            allow 172.16.0.0/12;
            deny all;
        }
        
        location / {
            return 404;
        }
    }

    # ============================================================================
    # HEALTH PROXY SERVER FOR DASHBOARD HEALTH CHECKS
    # ============================================================================
    
    server {
        listen 8081;
        server_name localhost;
        
        # Dedicated logging for health proxy
        access_log /var/log/nginx/health_proxy.log health_proxy;
        error_log /var/log/nginx/health_proxy_error.log warn;
        
        # Rate limiting for health checks
        limit_req zone=health burst=10 nodelay;
        
        # Health check proxy endpoint for dashboard
        location /api/health-proxy {
            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;

            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            # Only allow GET requests
            if ($request_method != GET) {
                return 405;
            }

            # Get the target URL from query parameter
            set $target_url $arg_url;
            
            # Basic URL validation
            if ($target_url = '') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Content-Type' 'application/json' always;
                return 400 '{"accessible": false, "status": "400", "message": "Missing URL parameter"}';
            }

            # Security: Only allow http/https URLs
            if ($target_url !~ "^https?://") {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Content-Type' 'application/json' always;
                return 400 '{"accessible": false, "status": "400", "message": "Invalid URL scheme"}';
            }

            # Test endpoint
            if ($arg_test = 'true') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Content-Type' 'application/json' always;
                return 200 '{"accessible": true, "status": "200", "message": "Health proxy is available"}';
            }

            # Proxy settings for health checks
            proxy_pass $target_url;
            proxy_method HEAD;
            proxy_set_header User-Agent "7gram-health-checker/2.0";
            proxy_set_header Host $proxy_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Short timeouts for health checks
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
            
            # Don't follow redirects
            proxy_redirect off;
            
            # Don't buffer
            proxy_buffering off;
            
            # Only handle actual error responses with error_page
            # Success responses (2xx) will pass through normally
            error_page 300 301 302 303 304 307 308 = @health_redirect;
            error_page 400 401 403 404 405 = @health_client_error;
            error_page 500 502 503 504 = @health_server_error;
            error_page 408 444 = @health_timeout;
            
            # Intercept successful responses using a named location
            proxy_intercept_errors off;  # Let 2xx responses pass through normally
        }

        # Redirect response (3xx) - still considered accessible
        location @health_redirect {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Content-Type' 'application/json' always;
            return 200 '{"accessible": true, "status": "$upstream_status", "message": "Service accessible (redirect)"}';
        }

        # Client error response (4xx)
        location @health_client_error {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Content-Type' 'application/json' always;
            return 200 '{"accessible": true, "status": "$upstream_status", "message": "Service accessible (client error)"}';
        }

        # Server error response (5xx)
        location @health_server_error {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Content-Type' 'application/json' always;
            return 200 '{"accessible": false, "status": "$upstream_status", "message": "Service has server error"}';
        }

        # Timeout or connection error
        location @health_timeout {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Content-Type' 'application/json' always;
            return 200 '{"accessible": false, "status": "timeout", "message": "Service timeout or unreachable"}';
        }

        # Fallback for any other location on this server
        location / {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Content-Type' 'application/json' always;
            return 404 '{"accessible": false, "status": "404", "message": "Health proxy endpoint not found"}';
        }
    }

    # ============================================================================
    # INCLUDE SERVER CONFIGURATIONS
    # ============================================================================

    include /etc/nginx/conf.d/*.conf;
}
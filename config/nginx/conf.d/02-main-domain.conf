# ================================================
# MAIN DOMAIN AND AUTHENTICATION SERVICE
# ================================================

# ------------------------------------------------
# MAIN LANDING PAGE (No Auth) - HTTPS
# ------------------------------------------------
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name 7gram.xyz;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    error_log /var/log/nginx/debug.log debug;
    access_log /var/log/nginx/access.log;
    
    root /usr/share/nginx/html;
    index index.html;
    
    # Standard error pages
    error_page 404 /errors/404.html;
    error_page 500 502 503 504 /errors/500.html;
    
    location = /errors/404.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /errors/500.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    # Handle static assets FIRST (CSS, JS, fonts, images)
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|otf|map)$ {
        try_files $uri =404;
        
        # Force correct MIME types for CSS and JS
        location ~* \.css$ {
            add_header Content-Type "text/css; charset=utf-8";
            add_header Cache-Control "public, max-age=31536000";
        }
        
        location ~* \.js$ {
            add_header Content-Type "application/javascript; charset=utf-8";
            add_header Cache-Control "public, max-age=31536000";
        }
        
        # Font handling
        location ~* \.(woff|woff2|ttf|eot|otf)$ {
            add_header Access-Control-Allow-Origin "*";
            add_header Cache-Control "public, max-age=31536000";
        }
        
        # Minimal headers to avoid breaking CSS
        add_header X-Content-Type-Options "nosniff" always;
        expires 1y;
        gzip on;
        gzip_types text/css application/javascript;
    }
    
    # Root path - serve dashboard
    location = / {
        try_files /index.html =404;
    }
    
    # Debug endpoint
    location = /debug {
        add_header Content-Type text/plain;
        return 200 "Document Root: $document_root\nURI: $uri\nFile: $document_root$uri";
    }
    
    # Health endpoint
    location = /health {
        try_files /health/index.html =200;
        add_header Content-Type text/html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    # Fallback for all other requests
    location / {
        try_files $uri $uri/ /index.html;
    }
}

# ------------------------------------------------
# AUTHELIA SERVICE (No Auth Required) - HTTPS
# ------------------------------------------------
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name auth.7gram.xyz;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    error_page 404 /errors/404.html;
    error_page 500 502 503 504 /errors/500.html;
    
    location = /errors/404.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /errors/500.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location / {
        proxy_pass http://100.121.199.80;
        include /etc/nginx/includes/proxy_params.conf;
    }
}
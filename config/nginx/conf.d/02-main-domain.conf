# ================================================
# MAIN DOMAIN AND AUTHENTICATION SERVICE
# ================================================

# ------------------------------------------------
# MAIN LANDING PAGE (No Auth) - HTTPS
# ------------------------------------------------
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name 7gram.xyz;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Enhanced Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # Content Security Policy for Dashboard
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' wss: https:; font-src 'self' data:; manifest-src 'self';" always;
    
    error_log /var/log/nginx/debug.log debug;
    access_log /var/log/nginx/access.log;
    
    root /usr/share/nginx/html;
    index index.html;
    
    # Standard error pages
    error_page 404 /errors/404.html;
    error_page 500 502 503 504 /errors/500.html;
    
    location = /errors/404.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /errors/500.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    # ================================================
    # PWA AND SERVICE WORKER CONFIGURATION
    # ================================================
    
    # Service Worker - Critical for PWA functionality
    location = /sw.js {
        add_header Content-Type "application/javascript; charset=utf-8" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
        add_header Service-Worker-Allowed "/" always;
        add_header X-Content-Type-Options "nosniff" always;
        
        try_files $uri =404;
    }
    
    # PWA Manifest
    location = /manifest.json {
        add_header Content-Type "application/manifest+json; charset=utf-8" always;
        add_header Cache-Control "public, max-age=86400" always; # 1 day
        add_header Access-Control-Allow-Origin "*" always;
        
        try_files $uri =404;
    }
    
    # PWA Icons and assets
    location ~* ^/assets/images/icons/ {
        add_header Cache-Control "public, max-age=2592000" always; # 30 days
        add_header Access-Control-Allow-Origin "*" always;
        add_header Content-Type "image/png" always;
        
        try_files $uri =404;
    }
    
    # ================================================
    # API ENDPOINTS FOR DASHBOARD
    # ================================================
    
    # Health Check API
    location = /api/health-check {
        add_header Content-Type "application/json; charset=utf-8" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
        
        return 200 '{
            "status": "healthy",
            "timestamp": "$time_iso8601",
            "server": "$hostname",
            "services": {
                "nginx": "running",
                "total_services": 15,
                "online": 12,
                "warning": 2,
                "offline": 1
            },
            "system": {
                "uptime": "99.8%",
                "load": "normal",
                "memory": "2.1GB used",
                "connections": 45
            },
            "network": {
                "latency": "12ms",
                "throughput": "1.2Gbps"
            }
        }';
    }
    
    # Service Discovery API
    location = /api/discover-services {
        add_header Content-Type "application/json; charset=utf-8" always;
        add_header Cache-Control "public, max-age=300" always; # 5 minutes
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
        
        return 200 '{
            "services": [
                {
                    "id": "emby-discovered",
                    "name": "Emby Media Server",
                    "url": "https://emby.7gram.xyz",
                    "status": "online",
                    "responseTime": 145,
                    "lastSeen": "$time_iso8601",
                    "category": "Media Services",
                    "icon": "üé¨",
                    "discovered": true,
                    "method": "docker-labels"
                },

                {
                    "id": "home-assistant-discovered",
                    "name": "Home Assistant",
                    "url": "https://home.7gram.xyz",
                    "status": "online", 
                    "responseTime": 67,
                    "lastSeen": "$time_iso8601",
                    "category": "System Services",
                    "icon": "üè†",
                    "discovered": true,
                    "method": "network-scan"
                }
            ],
            "discovery": {
                "method": "multi-source",
                "lastRun": "$time_iso8601",
                "found": 3,
                "sources": ["docker-labels", "compose-files", "network-scan"],
                "nextRun": "300s"
            }
        }';
    }
    
    # Dynamic Services Status API
    location = /api/dynamic-services {
        add_header Content-Type "application/json; charset=utf-8" always;
        add_header Cache-Control "public, max-age=60" always; # 1 minute
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
        
        return 200 '{
            "services": [
                {
                    "id": "emby",
                    "name": "Emby",
                    "status": "online",
                    "responseTime": 145,
                    "uptime": 99.8,
                    "lastCheck": "$time_iso8601",
                    "metrics": {
                        "cpu": "12%",
                        "memory": "2.1GB",
                        "connections": 3,
                        "disk": "45%"
                    },
                    "trend": "stable"
                },
                {
                    "id": "jellyfin",
                    "name": "Jellyfin",
                    "status": "warning",
                    "responseTime": 342,
                    "uptime": 98.1,
                    "lastCheck": "$time_iso8601",
                    "metrics": {
                        "cpu": "23%",
                        "memory": "1.8GB",
                        "connections": 1,
                        "disk": "67%"
                    },
                    "trend": "degrading",
                    "issues": ["high_response_time"]
                },
                {
                    "id": "sonarr",
                    "name": "Sonarr",
                    "status": "online",
                    "responseTime": 89,
                    "uptime": 99.5,
                    "lastCheck": "$time_iso8601",
                    "metrics": {
                        "cpu": "8%",
                        "memory": "512MB",
                        "disk": "23%",
                        "queue": 5
                    },
                    "trend": "improving"
                },
                {
                    "id": "home-assistant",
                    "name": "Home Assistant",
                    "status": "online",
                    "responseTime": 67,
                    "uptime": 99.95,
                    "lastCheck": "$time_iso8601",
                    "metrics": {
                        "cpu": "5%",
                        "memory": "456MB",
                        "entities": 45,
                        "automations": 12
                    },
                    "trend": "excellent"
                },
                {
                    "id": "ai-chat",
                    "name": "Open WebUI",
                    "status": "online",
                    "responseTime": 234,
                    "uptime": 99.2,
                    "lastCheck": "$time_iso8601",
                    "metrics": {
                        "cpu": "45%",
                        "memory": "4.2GB",
                        "gpu": "78%",
                        "requests": 23
                    },
                    "trend": "active"
                }
            ],
            "summary": {
                "total": 15,
                "online": 12,
                "warning": 2,
                "offline": 1,
                "avgResponseTime": 175,
                "totalUptime": 99.3
            },
            "trends": {
                "improving": 3,
                "stable": 8,
                "degrading": 3,
                "critical": 1
            },
            "lastUpdate": "$time_iso8601",
            "nextUpdate": "60s"
        }';
    }
    
    # Service Analytics API
    location = /api/analytics {
        add_header Content-Type "application/json; charset=utf-8" always;
        add_header Cache-Control "public, max-age=300" always;
        add_header Access-Control-Allow-Origin "*" always;
        
        return 200 '{
            "usage": {
                "topServices": [
                    {"id": "emby", "name": "Emby", "clicks": 89, "trend": "+12%"},
                    {"id": "home-assistant", "name": "Home Assistant", "clicks": 67, "trend": "+8%"},
                    {"id": "ai-chat", "name": "Open WebUI", "clicks": 45, "trend": "+25%"}
                ],
                "totalClicks": 234,
                "uniqueUsers": 3,
                "avgSessionTime": "12m"
            },
            "performance": {
                "avgLoadTime": "1.2s",
                "cacheHitRate": 78,
                "errorRate": 0.02
            },
            "period": "7d",
            "generated": "$time_iso8601"
        }';
    }
    
    # CORS preflight requests for all API endpoints
    location /api/ {
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin '*' always;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'Content-Type, Authorization, X-Requested-With' always;
            add_header Access-Control-Max-Age 1728000 always;
            add_header Content-Length 0 always;
            return 204;
        }
        
        # Fallback for undefined API endpoints
        return 404 '{"error": "API endpoint not found", "timestamp": "$time_iso8601"}';
    }
    
    # ================================================
    # ENHANCED STATIC ASSET HANDLING
    # ================================================
    
    # JavaScript modules with enhanced caching
    location ~* ^/assets/js/.*\.js$ {
        add_header Content-Type "application/javascript; charset=utf-8" always;
        add_header Cache-Control "public, max-age=86400" always; # 1 day
        add_header X-Content-Type-Options "nosniff" always;
        
        gzip on;
        gzip_types application/javascript;
        gzip_vary on;
        
        expires 1d;
        try_files $uri =404;
    }
    
    # CSS files with enhanced caching
    location ~* ^/assets/css/.*\.css$ {
        add_header Content-Type "text/css; charset=utf-8" always;
        add_header Cache-Control "public, max-age=86400" always; # 1 day
        add_header X-Content-Type-Options "nosniff" always;
        
        gzip on;
        gzip_types text/css;
        gzip_vary on;
        
        expires 1d;
        try_files $uri =404;
    }
    
    # Configuration files - shorter cache for dynamic content
    location ~* ^/config/.*\.json$ {
        add_header Content-Type "application/json; charset=utf-8" always;
        add_header Cache-Control "public, max-age=3600" always; # 1 hour
        add_header X-Content-Type-Options "nosniff" always;
        add_header Access-Control-Allow-Origin "*" always;
        
        gzip on;
        gzip_types application/json;
        gzip_vary on;
        
        try_files $uri =404;
    }
    
    # Components - medium cache (OPTIMIZED - no duplicate Content-Type)
    location ~* ^/components/.*\.html$ {
        add_header Cache-Control "public, max-age=21600" always; # 6 hours
        add_header X-Content-Type-Options "nosniff" always;
        
        gzip on;
        gzip_vary on;
        
        try_files $uri =404;
    }
    
    # Images and media files
    location ~* \.(png|jpg|jpeg|gif|webp|svg|ico)$ {
        add_header Cache-Control "public, max-age=2592000" always; # 30 days
        add_header Access-Control-Allow-Origin "*" always;
        
        expires 30d;
        try_files $uri =404;
    }
    
    # Font files
    location ~* \.(woff|woff2|ttf|eot|otf)$ {
        add_header Access-Control-Allow-Origin "*" always;
        add_header Cache-Control "public, max-age=31536000" always; # 1 year
        add_header Vary "Accept-Encoding" always;
        
        expires 1y;
        try_files $uri =404;
    }
    
    # Legacy static asset handling (fallback)
    location ~* \.(css|js|map)$ {
        add_header X-Content-Type-Options "nosniff" always;
        add_header Cache-Control "public, max-age=31536000" always;
        
        gzip on;
        gzip_types text/css application/javascript;
        gzip_vary on;
        
        expires 1y;
        try_files $uri =404;
    }
    
    # ================================================
    # DASHBOARD ROUTES AND SPECIAL ENDPOINTS
    # ================================================
    
    # Root path - serve enhanced dashboard
    location = / {
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        
        try_files /index.html =404;
    }
    
    # Health endpoint for monitoring (OPTIMIZED - no duplicate Content-Type)
    location = /health {
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        
        try_files /health.html /test.html =200;
    }
    
    # Debug endpoint with enhanced info
    location = /debug {
        add_header Content-Type "text/plain; charset=utf-8" always;
        add_header Cache-Control "no-cache" always;
        
        return 200 "7Gram Dashboard Debug Info
Document Root: $document_root
URI: $uri
Request: $request
Time: $time_iso8601
Remote IP: $remote_addr
User Agent: $http_user_agent
SSL Protocol: $ssl_protocol
HTTP Version: $server_protocol
Request ID: $request_id";
    }
    
    # Dashboard status endpoint
    location = /status {
        add_header Content-Type "application/json; charset=utf-8" always;
        add_header Cache-Control "no-cache" always;
        
        return 200 '{
            "dashboard": "7Gram Network",
            "version": "2.0.0",
            "status": "operational",
            "features": ["PWA", "Real-time", "Responsive", "Secure"],
            "uptime": "99.8%",
            "timestamp": "$time_iso8601"
        }';
    }
    
    # Robots.txt for SEO
    location = /robots.txt {
        add_header Content-Type "text/plain" always;
        add_header Cache-Control "public, max-age=86400" always;
        
        return 200 "User-agent: *
Disallow: /api/
Disallow: /config/
Disallow: /admin/
Allow: /

Sitemap: https://7gram.xyz/sitemap.xml";
    }
    
    # Security.txt for responsible disclosure
    location = /.well-known/security.txt {
        add_header Content-Type "text/plain" always;
        
        return 200 "Contact: admin@7gram.xyz
Expires: 2026-01-01T00:00:00.000Z
Preferred-Languages: en
Canonical: https://7gram.xyz/.well-known/security.txt";
    }
    
    # ================================================
    # FALLBACK AND SPA ROUTING
    # ================================================
    
    # Single Page Application fallback - serve index.html for client-side routing
    location / {
        try_files $uri $uri/ @fallback;
    }
    
    location @fallback {
        # Check if it's an API request
        if ($uri ~* ^/api/) {
            return 404 '{"error": "API endpoint not found"}';
        }
        
        # For all other requests, serve the dashboard
        rewrite ^.*$ /index.html last;
    }
}

# ------------------------------------------------
# AUTHELIA SERVICE (No Auth Required) - HTTPS
# ------------------------------------------------
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name auth.7gram.xyz;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    error_page 404 /errors/404.html;
    error_page 500 502 503 504 /errors/500.html;
    
    location = /errors/404.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /errors/500.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location / {
        proxy_pass http://100.121.199.80;
        include /etc/nginx/includes/proxy_params.conf;
    }
}
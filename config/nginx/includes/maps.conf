# /etc/nginx/includes/maps.conf
# Consolidated utility maps for nginx configuration

# ============================================================================
# CONNECTION AND PROTOCOL HANDLING
# ============================================================================

# WebSocket upgrade handling
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# ============================================================================
# CACHE CONTROL AND EXPIRATION
# ============================================================================

# Cache control based on content type - Optimized for media server
map $sent_http_content_type $cache_control_header {
    # HTML pages - short cache, allow revalidation
    "text/html"                          "public, max-age=3600, must-revalidate";
    "text/html; charset=utf-8"           "public, max-age=3600, must-revalidate";
    
    # API responses - no cache
    "application/json"                   "no-cache, no-store, must-revalidate";
    "application/json; charset=utf-8"    "no-cache, no-store, must-revalidate";
    
    # Static assets - long cache with immutable flag
    "text/css"                           "public, max-age=31536000, immutable";
    "application/javascript"             "public, max-age=31536000, immutable";
    "application/x-javascript"           "public, max-age=31536000, immutable";
    
    # Images - long cache
    "image/jpeg"                         "public, max-age=31536000";
    "image/jpg"                          "public, max-age=31536000";
    "image/png"                          "public, max-age=31536000";
    "image/gif"                          "public, max-age=31536000";
    "image/webp"                         "public, max-age=31536000";
    "image/svg+xml"                      "public, max-age=31536000";
    "image/x-icon"                       "public, max-age=31536000";
    
    # Fonts - very long cache
    "font/woff"                          "public, max-age=31536000, immutable";
    "font/woff2"                         "public, max-age=31536000, immutable";
    "font/ttf"                           "public, max-age=31536000, immutable";
    "font/otf"                           "public, max-age=31536000, immutable";
    "application/font-woff"              "public, max-age=31536000, immutable";
    "application/font-woff2"             "public, max-age=31536000, immutable";
    
    # Media files - moderate cache (they may be updated)
    "video/mp4"                          "public, max-age=604800";  # 1 week
    "video/webm"                         "public, max-age=604800";
    "video/x-msvideo"                    "public, max-age=604800";  # AVI
    "audio/mpeg"                         "public, max-age=604800";  # MP3
    "audio/mp4"                          "public, max-age=604800";  # M4A
    "audio/flac"                         "public, max-age=604800";
    "audio/ogg"                          "public, max-age=604800";
    
    # Documents
    "application/pdf"                    "public, max-age=86400";   # 1 day
    
    # Default - short cache
    default                              "public, max-age=3600";
}

# Expires header based on file extension
map $uri $expires_time {
    # Static assets - long expiration
    ~*\.(css|js)$                        "1y";
    ~*\.(jpg|jpeg|png|gif|webp|svg|ico)$ "1y";
    ~*\.(woff|woff2|ttf|otf|eot)$        "1y";
    
    # Media files - moderate expiration
    ~*\.(mp4|mkv|avi|mov|webm|mp3|flac|aac|ogg)$ "1w";
    
    # Documents
    ~*\.(pdf|doc|docx)$                  "1d";
    
    # Dynamic content - no cache
    ~*\.(html|htm|php)$                  "epoch";
    ~^/api/                              "epoch";
    
    # Default
    default                              "1h";
}

# ============================================================================
# SECURITY HEADERS - DYNAMIC BASED ON SERVICE TYPE
# ============================================================================

# X-Frame-Options based on service type
map $http_host $x_frame_options {
    # Media servers need to be embeddable
    ~^(emby|jellyfin|plex)\.7gram\.xyz$     "SAMEORIGIN";
    
    # Admin interfaces should be strict
    ~^(auth|pihole|home|homarr)\.7gram\.xyz$ "DENY";
    
    # Default
    default                                  "SAMEORIGIN";
}

# Content Type Options
map $http_host $x_content_type_options {
    default "nosniff";
}

# XSS Protection
map $http_host $x_xss_protection {
    default "1; mode=block";
}

# Referrer Policy - stricter for admin interfaces
map $http_host $referrer_policy {
    # Strict for admin/auth services
    ~^(auth|pihole|home|qbt|sonarr|radarr)\.7gram\.xyz$ "strict-origin";
    
    # Relaxed for media services (some features need referrer)
    ~^(emby|jellyfin|plex|abs)\.7gram\.xyz$             "strict-origin-when-cross-origin";
    
    # Default
    default                                              "strict-origin-when-cross-origin";
}

# Content Security Policy - Simplified and service-specific
map $http_host $content_security_policy {
    # Media servers - need relaxed policies for functionality
    ~^(emby|jellyfin|plex)\.7gram\.xyz$ "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob: wss:; img-src 'self' data: https: blob:; connect-src 'self' wss: https:;";
    
    # Audiobook and book services
    ~^(abs|calibre)\.7gram\.xyz$ "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob:; img-src 'self' data: https: blob:; connect-src 'self' wss: https:;";
    
    # AI services - need WebSocket and API access
    ~^(ai|chat|ollama)\.7gram\.xyz$ "default-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data: https:; connect-src 'self' wss: https:;";
    
    # Admin interfaces - strict policies
    ~^(auth|pihole)\.7gram\.xyz$ "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self';";
    
    # *arr services - moderate restrictions
    ~^(sonarr|radarr|lidarr|prowlarr|jackett)\.7gram\.xyz$ "default-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data: https:; connect-src 'self' https:;";
    
    # Household services - moderate restrictions for Mealie/Grocy
    ~^(mealie|grocy)\.7gram\.xyz$ "default-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data: https:; connect-src 'self' https:;";
    
    # Default policy - moderate
    default "default-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' https:;";
}

# HSTS header duration based on service criticality
map $http_host $hsts_duration {
    # Critical admin interfaces - long HSTS
    ~^(auth|pihole|home)\.7gram\.xyz$        "max-age=31536000; includeSubDomains; preload";
    
    # Media services - moderate HSTS
    ~^(emby|jellyfin|plex)\.7gram\.xyz$      "max-age=31536000; includeSubDomains";
    
    # Default HSTS
    default                                  "max-age=31536000; includeSubDomains";
}

# ============================================================================
# RATE LIMITING AND ACCESS CONTROL
# ============================================================================

# Rate limiting zones based on service type and URI
map $http_host$request_uri $rate_limit_key {
    # Auth service - strict rate limiting
    ~^auth\.7gram\.xyz/.*$                    "auth_$binary_remote_addr";
    
    # API endpoints - moderate rate limiting
    ~^.*\.7gram\.xyz/api/.*$                  "api_$binary_remote_addr";
    
    # Media streaming - relaxed rate limiting
    ~^(emby|jellyfin|plex|abs)\.7gram\.xyz/.*$ "media_$binary_remote_addr";
    
    # Admin interfaces - moderate rate limiting
    ~^(sonarr|radarr|lidarr|prowlarr|jackett|qbt)\.7gram\.xyz/.*$ "admin_$binary_remote_addr";
    
    # Household services - relaxed rate limiting
    ~^(mealie|grocy)\.7gram\.xyz/.*$          "general_$binary_remote_addr";
    
    # Health checks - no rate limiting
    ~^.*\.7gram\.xyz/(health|ping)$           "";
    
    # Default rate limiting
    default                                   "general_$binary_remote_addr";
}

# Authentication requirement mapping
map $http_host $auth_required {
    # Public services - no auth required
    ~^7gram\.xyz$                             0;
    ~^auth\.7gram\.xyz$                       0;
    
    # All other services require authentication
    default                                   1;
}

# ============================================================================
# CONTENT TYPE AND MEDIA HANDLING
# ============================================================================

# Media file detection for streaming optimization
map $uri $is_media_file {
    # Video files
    ~*\.(mp4|mkv|avi|mov|wmv|flv|webm|m4v|3gp|ogv)$  "video";
    # Audio files  
    ~*\.(mp3|flac|aac|ogg|wma|wav|m4a|opus)$          "audio";
    # Images
    ~*\.(jpg|jpeg|png|gif|webp|svg|bmp|tiff)$         "image";
    # Documents
    ~*\.(pdf|doc|docx|txt|epub|mobi)$                 "document";
    # Default
    default                                            "other";
}

# Large file detection (for different handling)
map $uri $is_large_file {
    ~*\.(mp4|mkv|avi|mov|wmv|flv|webm|iso|zip|tar|gz|7z)$ 1;
    default                                                0;
}

# ============================================================================
# LOGGING AND MONITORING
# ============================================================================

# Determine if request should be logged (reduce noise)
map $request_uri $should_log {
    # Don't log health checks
    ~^/(health|ping|status)$                 0;
    # Don't log static assets (optional - comment out to log everything)
    ~*\.(css|js|png|jpg|gif|ico|woff|woff2)$ 0;
    # Don't log frequent polling endpoints
    ~^/api/system/status$                    0;
    # Log everything else
    default                                  1;
}

# User agent classification
map $http_user_agent $client_type {
    # Browsers
    ~*chrome                                 "browser";
    ~*firefox                                "browser";
    ~*safari                                 "browser";
    ~*edge                                   "browser";
    
    # Mobile apps
    ~*mobile                                 "mobile";
    ~*android                                "mobile";
    ~*iphone                                 "mobile";
    
    # Media clients
    ~*plex                                   "media_client";
    ~*emby                                   "media_client";
    ~*jellyfin                               "media_client";
    ~*kodi                                   "media_client";
    
    # Bots (for blocking if needed)
    ~*bot                                    "bot";
    ~*crawler                                "bot";
    ~*spider                                 "bot";
    ~*scraper                                "bot";
    
    # API clients
    ~*curl                                   "api_client";
    ~*wget                                   "api_client";
    ~*postman                                "api_client";
    
    # Empty or unknown
    ""                                       "unknown";
    default                                  "other";
}

# Bot blocking (set to 1 to block, 0 to allow)
map $client_type $block_client {
    # Allow legitimate clients
    "browser"                                0;
    "mobile"                                 0;
    "media_client"                           0;
    "api_client"                             0;
    
    # Block malicious bots (you can customize this)
    "bot"                                    0;  # Set to 1 to block bots
    "unknown"                                0;  # Set to 1 to block unknown clients
    
    # Default allow
    default                                  0;
}

# ============================================================================
# SSL AND SECURITY
# ============================================================================

# SSL redirect mapping (for when you add HTTPS)
map $scheme $ssl_redirect {
    http                                     1;  # Redirect HTTP to HTTPS
    default                                  0;
}